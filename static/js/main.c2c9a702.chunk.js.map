{"version":3,"sources":["logo.svg","components/waiting/SignIn/signin.js","components/waiting/gamesetup/gamesetup.js","components/waiting/holding/holdingarea.js","components/waiting/waitingarea.js","components/game/PlayerPanel/Player/Character/character.js","components/game/PlayerPanel/Player/Hand/hand.js","components/game/PlayerPanel/Player/player.js","components/game/PlayerPanel/playerpanel.js","components/game/Board/Deck/deck.js","components/game/Board/Nobles/nobles.js","components/game/Board/Tokens/tokenContainer.js","components/game/Board/board.js","components/game/game.js","SampleGame.js","App.js","reportWebVitals.js","index.js"],"names":["SignIn","props","state","isLogin","toggleIsLogin","bind","this","setState","console","log","id","type","placeholder","name","value","onClick","login","href","return","false","register","className","renderForm","Component","GameSetup","characters","disabled","defaultValue","names","i","push","e","document","getElementById","innerHTML","process","target","idContainer","startButton","onChange","renderGameID","updateCharacter","renderCharacters","startgame","class","HoldingArea","setInterval","getUpdate","players","gamePlayers","gameData","length","user","username","src","character_id","renderPlayers","initGame","styles","bounce","animation","animationName","Radium","keyframes","empty","fadeIn","fadeOut","flip","jello","pulse","rubberBand","shake","tada","wobble","swing","flipInX","zoomIn","styleList","WaitingArea","cards","cardNum","Math","floor","random","style","alt","loggedIn","gameStatus","joingame","joinGame","renderCards","renderContainer","Character","numOfCards","playerClass","handleClick","player","ownedCards","loggedInPlayer","openReservedCardPanel","side","reserveCanPlay","active","position","turn","numOfPlayers","renderReservedCards","score","React","Hand","cardArray","hand","calculateCards","key","tokenName","tokenObject","tokens","renderTokens","Player","totalScore","nobles","findScore","closeReservedCardPanel","tokenPool","PlayerPanel","playersArray","Deck","deckArray","renderCard","card","clickFunction","selectCard","hover","tokenList","goldCount","gold","j","num","tokenCost","currentTurn","reserveCard","deckCover","deck","NobleContainer","nobleArray","renderNoble","noble","renderNobles","TokenContainer","selectToken","renderToken","token","top","left","Board","decks","game","color","bluedeck","greendeck","yellowdeck","tokensSelected","Game","canPlay","takeObjects","playTurn","cancelPlay","cardSelected","tokenDict","availableNobles","getNoble","champion","filter","reservedCardList","renderList","activeClass","elemList","regex","RegExp","test","hidden","openReserve","renderCanPlay","holdTurn","renderCanNoble","endgame","API_URL","App","character","user_id","lastGotNoble","currentPlayer","choice","handleRegister","handleStartGame","handleLogin","getGameUpdate","handleInitializeGame","handleSelectCard","handleGetToken","handleGetNoble","handlePlayClick","setNobleState","getReserveCard","getGoldCoin","parentElement","classList","toggleSelectClass","currentTokens","parseInt","updated","shift","pop","splice","toggle","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","response","JSON","parse","data","querySelector","send","stringify","alert","url","char_id","game_id","extraCard","is_available","checkNobles","copyCurrentTurn","renderApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c2c9a702.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\n\r\n\r\nclass SignIn extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            isLogin : false\r\n        }\r\n        this.toggleIsLogin = this.toggleIsLogin.bind(this)\r\n    }\r\n    toggleIsLogin(){\r\n        this.setState({\r\n                isLogin : !this.state.isLogin\r\n            })\r\n    }\r\n    renderForm(){\r\n        console.log(this.props)\r\n        if(this.state.isLogin){\r\n            return(\r\n                <form id=\"registration_form\">\r\n                    <h1>Splendid</h1>\r\n                    <p>Login</p>\r\n                    <input type=\"text\" placeholder=\"UserName\" name=\"username\" id=\"username\"/>\r\n                    <input type=\"password\"placeholder=\"Password\" name=\"password\" id=\"password\"/>\r\n                    <input type=\"button\" value=\"Login\" onClick={this.props.login} />\r\n                    <br />\r\n                    <a href=\"#\">Forgot Password?</a>\r\n                    <br />\r\n                    <a onClick={this.toggleIsLogin} return false>Register</a>\r\n                </form>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <form id=\"registration_form\">\r\n                    <h1>Splendid</h1>\r\n                    <p>Register</p>\r\n                    <input type=\"text\" placeholder=\"UserName\" name=\"username\" id=\"username\"/>\r\n                    <input type=\"email\" placeholder=\"Email\" name=\"email\" id=\"email\"/>\r\n                    <input type=\"password\"placeholder=\"Password\" name=\"password\" id=\"password\"/>\r\n                    <input type=\"password\" placeholder=\"Confirm Password\" name=\"confirm\" id=\"confirm\"/>\r\n                    <br />\r\n                    <input type=\"button\" value=\"Register\" onClick={this.props.register}/>\r\n                    <br />\r\n                    <a href=\"#\">Forgot Password?</a>\r\n                    <br />\r\n                    <a onClick={this.toggleIsLogin}>Login</a>\r\n                </form>\r\n            )\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"signinContainer\">\r\n                {this.renderForm()}\r\n                    <div className=\"drops\">\r\n                        <div className=\"drop drop-1\"></div>\r\n                        <div className=\"drop drop-2\"></div>\r\n                        <div className=\"drop drop-3\"></div>\r\n                        <div className=\"drop drop-4\"></div>\r\n                        <div className=\"drop drop-5\"></div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SignIn;","import {React, Component } from 'react';\r\nimport './gamesetup.css'\r\n\r\nclass GameSetup extends Component {\r\n    renderCharacters(){\r\n        var characters = [(<option disabled defaultValue value> --Select Your Character -- </option> )]\r\n        var names = [\"-\",\"Space Boy\", \"Space Girl\", \"Buzz The Bee\", \"Michael Knight\", \"Roberto\", \"Chunky the Penguin\", \"Space Sister\", \"Space Baby\" ]\r\n        for(var i =1; i < 9; i++){\r\n            characters.push(\r\n                <option value={i}>{names[i]}</option>\r\n            )\r\n        }\r\n        return characters\r\n    }\r\n    updateCharacter(e){\r\n        var charContainer = document.getElementById('character')\r\n        charContainer.innerHTML = `<img src=${process.env.PUBLIC_URL +'/characters/'+e.target.value+'.png'} className='character' >`\r\n        console.log(e.target.value)\r\n    }\r\n    renderGameID(e){\r\n        var idContainer = document.getElementById('gameId')\r\n        var startButton = document.getElementById('start_game')\r\n        if(e.target.value === 'join_game'){\r\n            idContainer.innerHTML = `<input type='number' placeholder='game id' name='game_id' id='game_id'/>`\r\n            startButton.value = 'Join!'\r\n        }\r\n        else{\r\n            idContainer.innerHTML = ``\r\n            startButton.value = 'Start!'\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='signinContainer'>\r\n                <form>\r\n                    <select onChange={this.renderGameID} id=\"join_start\">\r\n                        <option value=\"new_game\">New Game</option>\r\n                        <option value=\"join_game\">Join Game</option>\r\n                    </select>\r\n                    <div id=\"gameId\">\r\n                    </div>\r\n                    <br />\r\n                    <select onChange={this.updateCharacter} id=\"character_id\">\r\n                        {this.renderCharacters()}\r\n                    </select>\r\n                    <div id=\"character\">\r\n\r\n                    </div>\r\n                    <input type='button' value='Start' onClick={this.props.startgame} id=\"start_game\"/>\r\n                </form>\r\n                <div class=\"drops\">\r\n                        <div class=\"drop drop-1\"></div>\r\n                        <div class=\"drop drop-2\"></div>\r\n                        <div class=\"drop drop-3\"></div>\r\n                        <div class=\"drop drop-4\"></div>\r\n                        <div class=\"drop drop-5\"></div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default GameSetup","import {React, Component} from 'react';\r\nimport './holdingarea.css'\r\n\r\nclass HoldingArea extends Component {\r\n    componentDidMount(){\r\n        setInterval(this.props.getUpdate, 5000);\r\n    }\r\n    // componentWillUnmount(){\r\n    //     clearInterval(updateInterval) \r\n    // }\r\n    renderPlayers(){\r\n        let players = []\r\n        let gamePlayers = this.props.gameData.players\r\n        for(var i = 0; i < gamePlayers.length; i++){\r\n            players.push(\r\n                <div className=\"playerWaitingContainer\">\r\n                    <h4>{gamePlayers[i].user.username}</h4>\r\n                    <img src={process.env.PUBLIC_URL +\"characters/\"+gamePlayers[i].character_id+\".png\"}/>\r\n                </div>\r\n            )\r\n        }\r\n        return players\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"signinContainer\">\r\n                <form>  \r\n                    <h3>Game id: {this.props.gameData.id}</h3>\r\n                    <h2>Players Ready: </h2>\r\n                    <div className=\"bullpen\">\r\n                        {this.renderPlayers()}\r\n                    </div>\r\n                    <input type=\"button\" value=\"Launch Game\" className=\"launchGame\" onClick={this.props.initGame}/>\r\n                    <br />\r\n                    <small>\r\n                        Launching Game will prevent any other players from joining\r\n                    </small>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HoldingArea;","import React, { Component } from 'react';\r\nimport { bounce, fadeIn, fadeOut, flip, flipInX, jello, pulse, rubberBand, shake, swing, tada, wobble, zoomIn } from 'react-animations';\r\nimport Radium, {StyleRoot} from 'radium';\r\nimport SignIn from './SignIn/signin';\r\nimport GameSetup from './gamesetup/gamesetup';\r\nimport HoldingArea from './holding/holdingarea';\r\nimport './login.scss'\r\n\r\nconst styles = {\r\n    bounce: {\r\n        animation: 'x 2s infinite',\r\n        animationName: Radium.keyframes(bounce, 'bounce')\r\n    },\r\n    empty: {\r\n        animation: 'x',\r\n        animationName: Radium.keyframes(bounce, 'bounce')\r\n    },\r\n    fadeIn: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(fadeIn, 'fadeIn')\r\n    },\r\n    fadeOut: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(fadeOut, 'fadeOut')\r\n    }, \r\n    flip: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(flip, \"flip\")\r\n    }, \r\n    jello: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(jello, \"jello\")\r\n    },\r\n    pulse: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(pulse, \"pulse\")\r\n    },\r\n    rubberBand: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(rubberBand, \"rubberBand\")\r\n    },\r\n    shake: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(shake, \"shake\")\r\n    },\r\n    tada: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(tada, \"tada\")\r\n    },\r\n    wobble: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(wobble, \"wobble\")\r\n    }, \r\n    swing: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(swing, \"swing\")\r\n    },\r\n    flipInX: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(flipInX, \"flipInX\")\r\n    },\r\n    zoomIn: {\r\n        animation: 'x 4s infinite',\r\n        animationName: Radium.keyframes(zoomIn, \"zoomIn\")\r\n    }\r\n}\r\nconst styleList = [styles.bounce, styles.empty, styles.fadeIn, styles.fadeOut, styles.flip, styles.jello, styles.pulse, styles.rubberBand, styles.shake, styles.tada, styles.wobble, styles.swing, styles.flipInX, styles.zoomIn]\r\n\r\nclass WaitingArea extends Component {\r\n    renderCards(){\r\n        var cards = []\r\n        for(var i = 1; i < 50; i++){\r\n            var cardNum = Math.floor((Math.random()*90)+1)\r\n            var animation = Math.floor(Math.random()*styleList.length)\r\n            cards.push(\r\n                <StyleRoot>\r\n                    <img src={process.env.PUBLIC_URL + \"cardImgs/\"+cardNum+\".png\"} className=\"backgroundCard\" style={styleList[animation]} alt=\"\"/>\r\n                </StyleRoot>\r\n            )\r\n        }\r\n        return cards\r\n    }\r\n    renderContainer(){\r\n        if(this.props.loggedIn){\r\n            if(!this.props.gameStatus){\r\n                return(\r\n                    < GameSetup \r\n                    startgame = {this.props.startgame}\r\n                    joingame = {this.props.joinGame}\r\n                    />\r\n                )\r\n            }\r\n            else{\r\n                return(\r\n                    < HoldingArea \r\n                    gameData = {this.props.gameData}\r\n                    initGame = {this.props.initGame}\r\n                    getUpdate = {this.props.getUpdate}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        else{\r\n            return( < SignIn \r\n                register = {this.props.register}\r\n                login = {this.props.login}\r\n                />)\r\n        }\r\n    }\r\n    render(){\r\n            return(\r\n                <div className=\"waitingContainer\">\r\n                    {this.renderCards()}\r\n                    <div className =\"overlay\"></div>\r\n                    {this.renderContainer()}\r\n                </div>\r\n            )\r\n        \r\n    }\r\n}\r\nexport default WaitingArea;","import React from 'react';\r\nimport './character.css'\r\n\r\nclass Character extends React.Component{\r\n    renderReservedCards(){\r\n        var numOfCards = 0; \r\n        var playerClass = \"\";\r\n        var handleClick = () => {}\r\n  \r\n        for(var i = 0; i < this.props.player.ownedCards.length; i++){\r\n            if(this.props.player.ownedCards[i] === \"0\"){\r\n                numOfCards++\r\n            }\r\n        }\r\n        if(this.props.player.user.id === this.props.loggedInPlayer.user.id){\r\n            handleClick = this.props.openReservedCardPanel\r\n            playerClass = \" player\"\r\n        }\r\n\r\n        return(\r\n            <div \r\n            className = {\"reservedCards \"+this.props.side+playerClass+this.props.reserveCanPlay} \r\n            onClick = {handleClick}\r\n            >{numOfCards}</div>\r\n        )\r\n    }\r\n    render(){\r\n        var active = \"\"\r\n        var position = this.props.player.turn\r\n        var turn = this.props.turn\r\n        if(turn%this.props.numOfPlayers === position){\r\n            active = \"active\"\r\n        }\r\n        return(\r\n            <div className= {\"characterContainer \"+this.props.side}>\r\n                {this.renderReservedCards()}\r\n                <div className = {\"character \"+this.props.side}>\r\n                    <p className={\"score \"+this.props.side}><span>{this.props.score}</span></p>\r\n                    <img src={process.env.PUBLIC_URL+\"/characters/\"+this.props.player.character_id+\".png\"} \r\n                    className={\"character \"+active+\" \"+this.props.side}\r\n                    alt=\"\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Character","import React from \"react\";\r\nimport './hand.css'\r\n\r\nclass Hand extends React.Component{\r\n    renderCards(cardArray){\r\n        var cards = []\r\n        var hand = this.calculateCards(cardArray)\r\n        for(const key in hand){\r\n            cards.push(\r\n                <div className={\"cardHand \"+key+\" \"+this.props.side} >\r\n                    <span>{hand[key]}</span>\r\n                </div>\r\n            )\r\n        }\r\n        return(cards)\r\n    }\r\n    calculateCards(cardArray){\r\n        var cards = {\r\n            \"gold\" : 0,\r\n            \"diamond\" : 0, \r\n            \"onyx\" : 0,\r\n            \"emerald\" : 0, \r\n            \"ruby\" : 0, \r\n            \"sapphire\" : 0, \r\n        }\r\n        for(var i = 0; i < cardArray.length; i++){\r\n            if(this.props.player.ownedCards[i] === \"1\"){\r\n                cards[cardArray[i].tokenName]++\r\n            }\r\n        }\r\n        return cards\r\n    }\r\n    renderTokens(tokenObject){\r\n        var tokens = []\r\n        for(const key in tokenObject){\r\n            tokens.push(\r\n                <div className={\"tokenHand \"+key+\" \"+this.props.side} >\r\n                    <span>{tokenObject[key]}</span>\r\n                </div>\r\n            )\r\n        }\r\n        return(tokens)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={\"allHand \"+this.props.side}>\r\n                <div className={\"hand \"+this.props.side}>\r\n                    {this.renderCards(this.props.hand)}\r\n                </div>\r\n                <div className={\"tokens \"+this.props.side}>\r\n                    {this.renderTokens(this.props.tokens)}\r\n                </div>\r\n            </div>\r\n                \r\n        )\r\n    }\r\n}\r\nexport default Hand;","import React from \"react\";\r\nimport Character from \"./Character/character\";\r\nimport Hand from \"./Hand/hand\";\r\nimport './player.css'\r\n\r\nclass Player extends React.Component{\r\n    findScore(player){\r\n        var totalScore = 0\r\n        for(var i = 0; i < player.nobles.length; i++){\r\n            totalScore += player.nobles[i].score\r\n        }\r\n        for(i = 0; i < player.cards.length; i++){\r\n            if(player.ownedCards[i] === \"1\"){\r\n                totalScore += player.cards[i].score\r\n            }\r\n        }\r\n\r\n        return totalScore;\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={\"player \"+this.props.side}>\r\n                < Character \r\n                player={this.props.player} \r\n                side={this.props.side}\r\n                turn={this.props.turn}\r\n                score={this.findScore(this.props.player)}\r\n                numOfPlayers={this.props.numOfPlayers}\r\n                openReservedCardPanel= {this.props.openReservedCardPanel}\r\n                closeReservedCardPanel = {this.props.closeReservedCardPanel}\r\n                loggedInPlayer = {this.props.loggedInPlayer}\r\n                reserveCanPlay = {this.props.reserveCanPlay}\r\n                />\r\n                < Hand \r\n                player={this.props.player} \r\n                tokens={this.props.player.tokenPool}\r\n                hand={this.props.player.cards}\r\n                side={this.props.side}\r\n                numOfPlayers={this.props.numOfPlayers} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player","import React  from \"react\";\r\nimport Player from './Player/player'\r\nimport './Player/player.css'\r\n\r\nclass PlayerPanel extends React.Component {\r\n    renderPlayers(playersArray){\r\n        var players = []\r\n        var i = 0\r\n        if(this.props.side === \"right\"){\r\n            i = 1;\r\n        }\r\n        for(i; i < playersArray.length; i +=2){\r\n            players.push(< Player player={playersArray[i]} \r\n                side={this.props.side} \r\n                turn={this.props.turn}\r\n                numOfPlayers={playersArray.length}\r\n                openReservedCardPanel = {this.props.openReservedCardPanel}\r\n                closeReservedCardPanel = {this.props.closeReservedCardPanel}\r\n                loggedInPlayer = {this.props.loggedInPlayer}\r\n                reserveCanPlay = {this.props.reserveCanPlay}\r\n                />)\r\n            }\r\n        return players\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"playerContainer right\">\r\n                {this.renderPlayers(this.props.players)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PlayerPanel;","import React  from \"react\";\r\nimport './deck.css'\r\n\r\nclass Deck extends React.Component {\r\n\r\n    renderCards(deckArray){\r\n        var cards = []\r\n        for(var i = 0; i < 4 && i < deckArray.length; i++){\r\n            cards.push(this.renderCard(deckArray[i]))\r\n        }\r\n        return cards\r\n    }\r\n    renderCard(card){\r\n        var clickFunction = this.props.selectCard\r\n        var hover = \" hover\"\r\n        var tokenPool = this.props.player.tokenPool\r\n        // console.log(\"CARD\", card, tokenPool)\r\n        var tokenList = [\"diamond\", \"ruby\", \"sapphire\", \"onyx\", \"emerald\"]\r\n        var goldCount = tokenPool.gold\r\n\r\n        \r\n        for(var i = 0; i < 5; i++){\r\n            // console.log(`I'm trying to subract ${card.tokenCost[tokenList[i]]} from ${tokenPool[tokenList[i]]}`)\r\n            var numOfCards = 0;\r\n            for(var j = 0; j < this.props.player.cards.length; j++){\r\n                if(this.props.player.cards[j].tokenName == tokenList[i]){\r\n                    numOfCards++\r\n                }\r\n            }\r\n            var num = card.tokenCost[tokenList[i]] - tokenPool[tokenList[i]] - numOfCards\r\n            if(num > 0){\r\n                goldCount -= num\r\n            }\r\n        }\r\n        if(goldCount < 0 && this.props.currentTurn.reserveCard == false){\r\n            clickFunction = () =>{}\r\n            hover = \"\"\r\n        }\r\n        \r\n        \r\n        return (\r\n            <img src={process.env.PUBLIC_URL +\"cardImgs/\"+card.id+\".png\"}\r\n            className = {\"card \"+card.id+\" \"+card.tokenName+hover}\r\n            onClick={clickFunction}\r\n            />\r\n        )\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"deckContainer\">\r\n                <img src={process.env.PUBLIC_URL + \"cardImgs/\"+this.props.deckCover} />\r\n                {this.props.renderCards(this.props.deck.cards)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Deck;","import React  from \"react\";\r\nimport './noble.css'\r\n\r\nclass NobleContainer extends React.Component {\r\n    renderNobles(nobleArray){\r\n        var nobles = []\r\n        for(var i =0; i < nobleArray.length; i++){\r\n            nobles.push(this.renderNoble(nobleArray[i]))\r\n        }\r\n        return nobles\r\n    }\r\n    renderNoble(noble){\r\n        return (\r\n            <img src={process.env.PUBLIC_URL + '/nobleImgs/'+noble.id+'.png'} className=\"nobleImg\" />\r\n        )\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"nobleContainer\">\r\n                {this.renderNobles(this.props.nobles)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NobleContainer;","import React  from \"react\";\r\nimport './token.css'\r\n\r\nclass TokenContainer extends React.Component {\r\n    renderTokens(tokenObject){\r\n        var tokens = []\r\n        var clickFunction = this.props.selectToken\r\n        if(this.props.currentTurn.reserveCard){\r\n            clickFunction = () => {}\r\n        }\r\n        for(const key in tokenObject){\r\n            if(tokenObject[key] === 0){\r\n                tokens.push(\r\n                    <div className={\"tokenSet \"+key}\r\n                    onClick={() => {}}\r\n                    >\r\n                        {this.renderToken(key, tokenObject[key])}\r\n                    </div>\r\n                    )\r\n            }\r\n            else{\r\n                tokens.push(\r\n                    <div className={\"tokenSet \"+key}\r\n                    onClick={clickFunction}\r\n                    >\r\n                        {this.renderToken(key, tokenObject[key])}\r\n                    </div>\r\n                    )\r\n            }\r\n        }\r\n        return tokens\r\n    }\r\n    renderToken(token, num){\r\n        var tokens = []\r\n        for(var i = num; i > 0; i--){\r\n            tokens.push(\r\n                <img \r\n                src={process.env.PUBLIC_URL + '/tokenImgs/'+token+'.svg'} \r\n                className={\"tokenImg a\"+i} \r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: 2*i,\r\n                    left: 2*i\r\n                }}\r\n                />\r\n                )\r\n        }\r\n        return tokens\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"tokenContainer\">\r\n                {this.renderTokens(this.props.tokens)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TokenContainer;","import React  from \"react\";\r\nimport Deck from \"./Deck/deck\";\r\nimport NobleContainer from \"./Nobles/nobles\";\r\nimport TokenContainer from \"./Tokens/tokenContainer\";\r\n\r\n\r\nclass Board extends React.Component {\r\n    // componentDidMount(){\r\n    //     updateInterval();\r\n    // }\r\n    // componentWillUnmount(){\r\n    //     clearInterval(updateInterval) \r\n    // }\r\n    render(){\r\n        var decks = this.props.game.decks\r\n        for(var i = 0; i < decks.length; i++){\r\n            if(decks[i].color === \"blue\"){\r\n                var bluedeck = decks[i]\r\n            }\r\n            if(decks[i].color === \"green\"){\r\n                var greendeck = decks[i]\r\n            }\r\n            if(decks[i].color === \"yellow\"){\r\n                var yellowdeck = decks[i]\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"boardContainer\">\r\n                < NobleContainer nobles={this.props.game.nobles}/>\r\n                < Deck \r\n                deck={bluedeck} \r\n                deckCover = \"bluedeck.svg\"\r\n                selectCard = {this.props.selectCard}\r\n                player = {this.props.loggedInPlayer}\r\n                currentTurn = {this.props.currentTurn}\r\n                renderCards = {this.props.renderCards}\r\n                />\r\n                < Deck \r\n                deck={yellowdeck}\r\n                deckCover = \"yellowdeck.svg\"\r\n                selectCard = {this.props.selectCard}\r\n                player = {this.props.loggedInPlayer}\r\n                currentTurn = {this.props.currentTurn}\r\n                renderCards = {this.props.renderCards}\r\n                />\r\n                < Deck \r\n                deck={greendeck}\r\n                deckCover = \"greendeck.svg\"\r\n                selectCard = {this.props.selectCard}\r\n                player = {this.props.loggedInPlayer}\r\n                currentTurn = {this.props.currentTurn}\r\n                renderCards = {this.props.renderCards}\r\n                />\r\n                < TokenContainer \r\n                tokens ={this.props.game.tokenPool} \r\n                tokensSelected = {this.props.currentTurn.tokensSelected}\r\n                selectToken = {this.props.selectToken}\r\n                currentTurn = {this.props.currentTurn}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Board;","import React  from \"react\";\r\nimport PlayerPanel from \"./PlayerPanel/playerpanel\"\r\nimport Board from \"./Board/board\";\r\nimport './playTurn.css'\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.renderCards = this.renderCards.bind(this)\r\n        this.reserveCanPlay = this.reserveCanPlay.bind(this)\r\n    }\r\n    renderCards(deckArray){\r\n        var cards = []\r\n        for(var i = 0; i < 4 && i < deckArray.length; i++){\r\n            cards.push(this.renderCard(deckArray[i]))\r\n        }\r\n        return cards\r\n    }\r\n    renderCard(card){\r\n        var clickFunction = this.props.selectCard\r\n        var hover = \" hover\"\r\n        var tokenPool = this.props.loggedInPlayer.tokenPool\r\n        // console.log(\"CARD\", card, tokenPool)\r\n        var tokenList = [\"diamond\", \"ruby\", \"sapphire\", \"onyx\", \"emerald\"]\r\n        var goldCount = tokenPool.gold\r\n\r\n        \r\n        for(var i = 0; i < 5; i++){\r\n\r\n            var numOfCards = 0;\r\n            for(var j = 0; j < this.props.loggedInPlayer.cards.length; j++){\r\n                if(this.props.loggedInPlayer.cards[j].tokenName == tokenList[i]){\r\n                    if(this.props.loggedInPlayer.ownedCards[j] === \"1\"){\r\n                        numOfCards++\r\n                    }\r\n                }\r\n            }\r\n            var num = card.tokenCost[tokenList[i]] - tokenPool[tokenList[i]] - numOfCards\r\n            if(num > 0){\r\n                goldCount -= num\r\n            }\r\n        }\r\n        if(goldCount < 0 && this.props.currentTurn.reserveCard == false){\r\n            clickFunction = () =>{}\r\n            hover = \"\"\r\n        }\r\n        \r\n        \r\n        return (\r\n            <img src={process.env.PUBLIC_URL +\"cardImgs/\"+card.id+\".png\"}\r\n            className = {\"card \"+card.id+\" \"+card.tokenName+hover}\r\n            onClick={clickFunction}\r\n            />\r\n        )\r\n    }\r\n    renderCanPlay(){\r\n        if(this.props.currentTurn.canPlay){\r\n            return(\r\n                <div className=\"playTurn\">\r\n                    <div className='playingObjects'>\r\n                        {this.takeObjects()}\r\n                    </div>\r\n                    <button \r\n                    className=\"playButton\"\r\n                    onClick={this.props.playTurn}\r\n                    value=\"play\"\r\n                    >Play!</button>\r\n                    <button \r\n                    className=\"cancelButton\"\r\n                    onClick={this.props.cancelPlay}\r\n                    value=\"cancel\"\r\n                    >Cancel.</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    takeObjects(){\r\n        if(this.props.currentTurn.cardSelected.id){\r\n            return(\r\n                <img src={process.env.PUBLIC_URL +\"cardImgs/\"+this.props.currentTurn.cardSelected.id+\".png\"}\r\n                className = {\"card\"}\r\n                />\r\n            )\r\n        }\r\n        else{\r\n            var tokenDict = {\r\n                6: \"gold\", \r\n                5: \"emerald\", \r\n                4: \"diamond\",\r\n                3: \"ruby\",\r\n                2: \"sapphire\",\r\n                1: \"onyx\"\r\n            }\r\n            var tokens = []\r\n            for(var i =0; i < this.props.currentTurn.tokensSelected.length; i++){\r\n                tokens.push(\r\n                    <img \r\n                    src={process.env.PUBLIC_URL + '/tokenImgs/'+tokenDict[this.props.currentTurn.tokensSelected[i]]+'.svg'} \r\n                    className={\"tokenImg a\"+i} \r\n                    />\r\n                )\r\n            }\r\n            return tokens\r\n        }\r\n    }\r\n    renderCanNoble(){\r\n        console.log(this.props)\r\n        if(this.props.availableNobles.length > 0){\r\n            return(\r\n                <div className=\"championOverlay\">\r\n                    <div className=\"playTurn buyNoble\">\r\n                        <h3>Nobles Available for {this.props.loggedInPlayer.user.username}</h3>\r\n                        <div className=\"nobleContainer\">\r\n                            {this.renderNobles()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    renderNobles(){\r\n        var nobles = []\r\n        for(var i =0 ; i < this.props.availableNobles.length; i++){\r\n            nobles.push(\r\n            <img \r\n            src={process.env.PUBLIC_URL + '/nobleImgs/'+this.props.availableNobles[i].id+'.png'} \r\n            className={\"nobleImg \"+this.props.availableNobles[i].id}\r\n            alt=''\r\n            onClick={this.props.getNoble}\r\n            />\r\n            )\r\n        }\r\n        return nobles\r\n    }\r\n    endgame(){\r\n        if(this.props.game.champion.length > 0){\r\n            return(\r\n                <div className=\"championOverlay\">\r\n                    <h1>This game was won by <strong>{this.props.game.champion.user.username}</strong></h1>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    holdTurn(){\r\n        console.log(\"Players\", this.props.game.players)\r\n        var player = this.props.game.players.filter(player => player.user.id === this.props.loggedInPlayer.user.id)[0]\r\n        var position = player.turn\r\n        if(this.props.game.turn%this.props.game.players.length === position){\r\n            return\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"championOverlay\">\r\n                    <h1>Please Get Ready for you're next turn</h1>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    reservedCardList(){\r\n        var loggedInPlayer = this.props.loggedInPlayer\r\n        var reservedCardList = []\r\n        var renderList =[]\r\n        //Sets Card List\r\n        for(var i = 0 ; i <  loggedInPlayer.cards.length; i++){\r\n            if(loggedInPlayer.ownedCards[i] === \"0\"){\r\n                reservedCardList.push(loggedInPlayer.cards[i])\r\n            }\r\n        }\r\n\r\n        for(var i = 0; i < reservedCardList.length; i++){ //Creates DOM objects\r\n            renderList.push(this.renderCard(reservedCardList[i]))\r\n        }\r\n\r\n        return renderList\r\n    }\r\n    reserveCanPlay(){\r\n        var activeClass = \"\"\r\n        var elemList = this.reservedCardList()\r\n        var regex = new RegExp('hover')\r\n        \r\n        \r\n        for(var i =0; i < elemList.length; i++){\r\n            if(regex.test(elemList[i].props.className)){\r\n                activeClass = \" active\"\r\n            }\r\n        }\r\n        return activeClass\r\n    }\r\n\r\n    render(){\r\n        var hidden = \" hidden\"\r\n        if(this.props.currentTurn.openReserve){\r\n            hidden = \"\"\r\n        }\r\n        return(\r\n            <div className=\"container\">\r\n                <img src={process.env.PUBLIC_URL +\"background.jpg\"} className=\"background\" alt=\"\"/>\r\n                < PlayerPanel players={this.props.game.players} \r\n                turn={this.props.game.turn}\r\n                openReservedCardPanel = {this.props.openReservedCardPanel}\r\n                closeReservedCardPanel = {this.props.closeReservedCardPanel}\r\n                loggedInPlayer = {this.props.loggedInPlayer}\r\n                side=\"left\"\r\n                reserveCanPlay = {this.reserveCanPlay()}\r\n                />\r\n                < Board \r\n                game={this.props.game}\r\n                currentTurn = {this.props.currentTurn}\r\n                selectToken = {this.props.selectToken}\r\n                selectCard = {this.props.selectCard}\r\n                loggedInPlayer = {this.props.loggedInPlayer}\r\n                renderCards = {this.renderCards}\r\n                />\r\n                < PlayerPanel players={this.props.game.players} \r\n                reserveCanPlay = {this.reserveCanPlay()}\r\n                turn={this.props.game.turn}\r\n                side=\"right\" \r\n                loggedInPlayer = {this.props.loggedInPlayer}\r\n                openReservedCardPanel = {this.props.openReservedCardPanel}\r\n                closeReservedCardPanel = {this.props.closeReservedCardPanel}\r\n                />\r\n                <div className={\"championOverlay\"+hidden} id=\"reservedCardContainer\">\r\n                    <div className=\"playTurn\">\r\n                        <button \r\n                        className=\"exit\"\r\n                        onClick={this.props.closeReservedCardPanel}\r\n                        >X</button>\r\n                        {this.reservedCardList()}\r\n                    </div>\r\n                </div>\r\n                {this.renderCanPlay()}\r\n                {this.holdTurn()}\r\n                {this.renderCanNoble()}\r\n                {this.endgame()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Game;","var gameData = {\r\n\t\"id\" : 0,\r\n\t\"champion\" : {\r\n\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\"username\" : \"jaecheese\",\r\n\t\t\t\t\t\"created_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\"updated_at\" : \"2021-10-15\",\r\n\t\t\t\t},\r\n\t\"turn\" : 17,\r\n\t\"tokenPool\" : {\r\n\t\t\t\t\t\"ruby\" : 5, \r\n\t\t\t\t\t\"emerald\" : 2, \r\n\t\t\t\t\t\"sapphire\" : 7, \r\n\t\t\t\t\t\"diamond\" : 4, \r\n\t\t\t\t\t\"onyx\" : 1,\r\n                    \"gold\" : 5,\r\n\t\t\t\t},\r\n    \"nobles\" : [\r\n                    { \r\n                    \"id\" : 1, \r\n                    \"score\" : 3, \r\n                    \"cost\" : {\r\n                        \"ruby\" : 0, \r\n                        \"emerald\" : 0, \r\n                        \"sapphire\" : 0, \r\n                        \"diamond\" : 0, \r\n                        \"onyx\" : 0\r\n                        }\r\n                    },\r\n                    { \r\n                    \"id\" : 2, \r\n                    \"score\" : 3, \r\n                    \"cost\" : {\r\n                        \"ruby\" : 0, \r\n                        \"emerald\" : 0, \r\n                        \"sapphire\" : 0, \r\n                        \"diamond\" : 0, \r\n                        \"onyx\" : 0\r\n                        }\r\n                    },\r\n                    { \r\n                    \"id\" : 3, \r\n                    \"score\" : 3, \r\n                    \"cost\" : {\r\n                        \"ruby\" : 0, \r\n                        \"emerald\" : 0, \r\n                        \"sapphire\" : 0, \r\n                        \"diamond\" : 0, \r\n                        \"onyx\" : 0\r\n                        }\r\n                    },\r\n                    { \r\n                    \"id\" : 4, \r\n                    \"score\" : 3, \r\n                    \"cost\" : {\r\n                        \"ruby\" : 0, \r\n                        \"emerald\" : 0, \r\n                        \"sapphire\" : 0, \r\n                        \"diamond\" : 0, \r\n                        \"onyx\" : 0\r\n                        }\r\n                    },\r\n                    { \r\n                    \"id\" : 5, \r\n                    \"score\" : 3, \r\n                    \"cost\" : {\r\n                        \"ruby\" : 0, \r\n                        \"emerald\" : 0, \r\n                        \"sapphire\" : 0, \r\n                        \"diamond\" : 0, \r\n                        \"onyx\" : 0\r\n                        }\r\n                    },\r\n                ],\r\n\t\"players\" : [ \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"id\" : 0,\r\n                        \"turn\" : 1, \r\n                        \"character_id\" : 4,\r\n\t\t\t\t\t\t\"user\" : {\r\n\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\"username\" : \"jaecheese\",\r\n\t\t\t\t\t\t\t\t\t\"created_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t\t\"updated_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"nobles\" : \t[\r\n\t\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 3, \r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t], \r\n\t\t\t\t\t\t\"tokens\" : \t{\r\n\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 3, \r\n\t\t\t\t\t\t\t\t\t\t\"diamond\" : 3, \r\n\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"cards\" : [\r\n\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\"id\" : 0,\r\n                        \"turn\" : 2, \r\n                        \"character_id\" : 3,\r\n\t\t\t\t\t\t\"user\" : {\r\n\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\"username\" : \"jaecheese\",\r\n\t\t\t\t\t\t\t\t\t\"created_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t\t\"updated_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"nobles\" : \t[\r\n\t\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 3, \r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t], \r\n\t\t\t\t\t\t\"tokens\" : \t{\r\n\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"cards\" : [\r\n                            { \r\n                                \"id\" : 0,\r\n                                \"score\" : 0, \r\n                                \"deck_id\" : 0, \r\n                                \"token\" : \"gold\",\r\n                                \"cost\" : {\r\n                                            \"ruby\" : 0, \r\n                                            \"emerald\" : 0, \r\n                                            \"sapphire\" : 0, \r\n                                            \"diamond\" : 0, \r\n                                            \"onyx\" : 0\r\n                                        }\r\n                            },\r\n                            { \r\n                                \"id\" : 0,\r\n                                \"score\" : 0, \r\n                                \"deck_id\" : 0, \r\n                                \"token\" : \"onyx\",\r\n                                \"cost\" : {\r\n                                            \"ruby\" : 0, \r\n                                            \"emerald\" : 0, \r\n                                            \"sapphire\" : 0, \r\n                                            \"diamond\" : 0, \r\n                                            \"onyx\" : 0\r\n                                        }\r\n                            },\r\n                            { \r\n                                \"id\" : 0,\r\n                                \"score\" : 0, \r\n                                \"deck_id\" : 0, \r\n                                \"token\" : \"ruby\",\r\n                                \"cost\" : {\r\n                                            \"ruby\" : 0, \r\n                                            \"emerald\" : 0, \r\n                                            \"sapphire\" : 0, \r\n                                            \"diamond\" : 0, \r\n                                            \"onyx\" : 0\r\n                                        }\r\n                            },\r\n                            { \r\n                                \"id\" : 0,\r\n                                \"score\" : 0, \r\n                                \"deck_id\" : 0, \r\n                                \"token\" : \"sapphire\",\r\n                                \"cost\" : {\r\n                                            \"ruby\" : 0, \r\n                                            \"emerald\" : 0, \r\n                                            \"sapphire\" : 0, \r\n                                            \"diamond\" : 0, \r\n                                            \"onyx\" : 0\r\n                                        }\r\n                            },\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\"id\" : 0,\r\n                        \"turn\" : 3, \r\n                        \"character_id\" : 1,\r\n\t\t\t\t\t\t\"user\" : {\r\n\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\"username\" : \"jaecheese\",\r\n\t\t\t\t\t\t\t\t\t\"created_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t\t\"updated_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"nobles\" : \t[\r\n\t\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 3, \r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t], \r\n\t\t\t\t\t\t\"tokens\" : \t{\r\n\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"cards\" : [\r\n\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\"id\" : 0,\r\n                        \"turn\" : 0, \r\n                        \"character_id\" : 2,\r\n\t\t\t\t\t\t\"user\" : {\r\n\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\"username\" : \"jaecheese\",\r\n\t\t\t\t\t\t\t\t\t\"created_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t\t\"updated_at\" : \"2021-10-15\",\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"nobles\" : \t[\r\n\t\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 3, \r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t], \r\n\t\t\t\t\t\t\"tokens\" : \t{\r\n\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"cards\" : [\r\n\t\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t\t\"id\" : 0,\r\n\t\t\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\"decks\" : [ \r\n\t\t{\r\n\t\t\t\"id\" : 0, \r\n\t\t\t\"game_id\" : 0, \r\n\t\t\t\"color\" : \"green\", \r\n\t\t\t\"cards\" : [\t\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 1,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 9,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 17,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 25,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"diamond\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 4, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},// alot more cards would go here\r\n\t\t\t\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\" : 0, \r\n\t\t\t\"game_id\" : 0, \r\n\t\t\t\"color\" : \"yellow\", \r\n\t\t\t\"cards\" : [\t\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 41,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 46,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 50,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 58,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"diamond\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 4, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},// alot more cards would go here\r\n\t\t\t\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\" : 0, \r\n\t\t\t\"game_id\" : 0, \r\n\t\t\t\"color\" : \"blue\", \r\n\t\t\t\"cards\" : [\t\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 71,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 85,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 90,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"ruby\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 1, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 1\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\"id\" : 78,\r\n\t\t\t\t\t\t\t\t\"score\" : 0, \r\n\t\t\t\t\t\t\t\t\"deck_id\" : 0, \r\n\t\t\t\t\t\t\t\t\"token\" : \"diamond\",\r\n\t\t\t\t\t\t\t\t\"cost\" : {\r\n\t\t\t\t\t\t\t\t\t\t\t\"ruby\" : 4, \r\n\t\t\t\t\t\t\t\t\t\t\t\"emerald\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"sapphire\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"diamond\" : 0, \r\n\t\t\t\t\t\t\t\t\t\t\t\"onyx\" : 0\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},// alot more cards would go here\r\n\t\t\t\t\t\t]\r\n\t\t},\r\n\t\t\t]\r\n}\r\nexport default gameData","import logo from './logo.svg';\r\nimport WaitingArea from './components/waiting/waitingarea'\r\nimport Game from './components/game/game'\r\nimport './App.css';\r\nimport gameData from './SampleGame'\r\nimport React from 'react';\r\n\r\n\r\nvar API_URL = 'http://localhost:8080'\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        loggedIn: false,\r\n        gameStatus: null, // null === (game not initialized); \"waiting\" === (game initialized but waiting for players); \"active\" === (no more players can join play is active)\r\n        gameData: gameData,\r\n        username: null,\r\n        character: null,\r\n        user_id: null,\r\n        lastGotNoble: null,\r\n        availableNobles: [],\r\n        currentPlayer: [],\r\n        currentTurn: { //default everytime component rerenders\r\n          canPlay: false,\r\n          reserveCard: false,\r\n          openReserve: false,\r\n          player: gameData.players[gameData.turn % gameData.players.length],\r\n          choice: null, // null, tokens, card\r\n          tokensSelected : [], //Array of 3 token Ids\r\n          cardSelected : {\r\n            id: null, \r\n            tokenName: null, \r\n          }\r\n      }\r\n    }\r\n    this.handleRegister = this.handleRegister.bind(this)\r\n    this.handleStartGame = this.handleStartGame.bind(this)\r\n    this.handleLogin = this.handleLogin.bind(this)\r\n    this.getGameUpdate = this.getGameUpdate.bind(this)\r\n    this.handleInitializeGame = this.handleInitializeGame.bind(this)\r\n    this.handleSelectCard = this.handleSelectCard.bind(this)\r\n    this.handleGetToken = this.handleGetToken.bind(this)\r\n    this.playTurn = this.playTurn.bind(this)\r\n    this.handleGetNoble = this.handleGetNoble.bind(this)\r\n    this.cancelPlay = this.cancelPlay.bind(this)\r\n    this.handlePlayClick = this.handlePlayClick.bind(this)\r\n    this.setNobleState = this.setNobleState.bind(this)\r\n    this.getReserveCard = this.getReserveCard.bind(this)\r\n    this.getGoldCoin = this.getGoldCoin.bind(this)\r\n    this.openReservedCardPanel = this.openReservedCardPanel.bind(this)\r\n    this.closeReservedCardPanel = this.closeReservedCardPanel.bind(this)\r\n  }\r\n  handleGetToken(e){\r\n    var tokenName = e.target.parentElement.classList[1]\r\n    this.toggleSelectClass(e)\r\n    var currentTokens = 0;\r\n    for(const key in this.state.currentTurn.player.tokenPool){\r\n      console.log(\"key:\", key)\r\n      console.log('combined',this.state.currentTurn.player.tokenPool[key])\r\n      currentTokens += parseInt(this.state.currentTurn.player.tokenPool[key])\r\n      console.log(currentTokens)\r\n    }\r\n    console.log(\"number of tokens \", currentTokens)\r\n    var tokenDict = {\r\n      \"onyx\" : 1, \r\n      \"sapphire\" : 2, \r\n      \"ruby\" : 3, \r\n      \"diamond\" : 4, \r\n      \"emerald\" : 5, \r\n      \"gold\" : 6\r\n    }\r\n    var updated = this.state.currentTurn\r\n    updated.cardSelected = {id: null, tokenName: null}\r\n    if(tokenName === \"gold\" && currentTokens != 10){\r\n      updated.tokensSelected = [] //clears selected tokens if choice is gold\r\n      updated.tokensSelected.push(tokenDict[tokenName])\r\n      updated.canPlay = true\r\n      this.setState({\r\n        currentTurn: updated\r\n      })\r\n      return\r\n    }\r\n\r\n    if(updated.tokensSelected.length === 0 && currentTokens != 10){\r\n      updated.tokensSelected.push(tokenDict[tokenName]) //Adds the new choice\r\n      updated.canPlay = false\r\n      this.setState({\r\n        currentTurn: updated\r\n      })\r\n      return\r\n    }else if(updated.tokensSelected[0] === 6 && currentTokens != 10){\r\n      updated.tokensSelected = [] //clears gold if choice is not gold\r\n      updated.tokensSelected.push(tokenDict[tokenName]) //Adds the new choice      \r\n      updated.canPlay = false\r\n      this.setState({\r\n        currentTurn: updated\r\n      })\r\n      return\r\n    }\r\n\r\n    if(updated.tokensSelected.length === 1){\r\n      if(tokenDict[tokenName] === updated.tokensSelected[0]){ //check if selected token matches\r\n        if(this.state.gameData.tokenPool[tokenName] > 3 && currentTokens < 9){ //Are their 4 or more tokens in the game.tokenPool\r\n          updated.tokensSelected.push(tokenDict[tokenName]) //Adds the new choice\r\n          updated.canPlay = true\r\n          this.setState({\r\n            currentTurn: updated\r\n          })\r\n          return\r\n        }\r\n        else{\r\n          updated.tokensSelected = [] \r\n          updated.canPlay = false\r\n          this.setState({\r\n            currentTurn: updated\r\n          })\r\n          return\r\n        }\r\n      }\r\n      else{\r\n        if(currentTokens < 9){\r\n          updated.tokensSelected.push(tokenDict[tokenName]) //Adds the new choice\r\n          updated.canPlay = false\r\n            this.setState({\r\n              currentTurn: updated\r\n            })\r\n            return\r\n        }\r\n      }\r\n    }\r\n    if(updated.tokensSelected.length === 2){\r\n      if(updated.tokensSelected[1] === updated.tokensSelected[0]){\r\n        if(tokenDict[tokenName] === updated.tokensSelected[0]){\r\n          updated.tokensSelected =[]\r\n          updated.canPlay = false\r\n          this.setState({\r\n            currentTurn: updated\r\n          })\r\n          return\r\n        }\r\n        return\r\n      }\r\n      if(tokenDict[tokenName] === updated.tokensSelected[0]){\r\n        updated.tokensSelected.shift()\r\n        updated.canPlay = false\r\n        this.setState({\r\n          currentTurn: updated\r\n        })\r\n        return\r\n      }\r\n      if(tokenDict[tokenName] === updated.tokensSelected[1]){\r\n        updated.tokensSelected.pop()\r\n        updated.canPlay = false\r\n        this.setState({\r\n          currentTurn: updated\r\n        })\r\n        return\r\n      }\r\n      if(currentTokens < 8){\r\n        updated.tokensSelected.push(tokenDict[tokenName])\r\n        updated.canPlay = true\r\n        this.setState({\r\n          currentTurn: updated\r\n        })\r\n        return\r\n      }\r\n    }\r\n    if(updated.tokensSelected.length === 3){\r\n      for(var i = 0 ; i < 3; i++){\r\n        if(updated.tokensSelected[i] === tokenDict[tokenName]){\r\n          updated.tokensSelected.splice(i, 1)\r\n          updated.canPlay = false\r\n          this.setState({\r\n            currentTurn: updated\r\n          })\r\n          return\r\n        }\r\n      }\r\n    }\r\n  } \r\n\r\n  handleSelectCard(e){\r\n    this.toggleSelectClass(e)\r\n    console.log(\"selected card\", e.target.classList[1])\r\n    var updated = this.state.currentTurn\r\n    if(!this.state.currentTurn.reserveCard){\r\n      updated.tokensSelected = []\r\n    }\r\n\r\n    updated.canPlay = true\r\n    if(updated.cardSelected.id === e.target.classList[1]){\r\n      updated.canPlay = false\r\n      updated.cardSelected = {\r\n        id: null,\r\n        tokenName: null,\r\n      }\r\n    }\r\n    else{\r\n      updated.cardSelected = {\r\n        id: e.target.classList[1], \r\n        tokenName: e.target.classList[2],\r\n        }\r\n    }\r\n    \r\n    this.setState({\r\n      currentTurn: updated\r\n    })\r\n  }\r\n  toggleSelectClass(e){\r\n    e.target.classList.toggle(\"selectedc\")\r\n  }\r\n  handleRegister(){\r\n    console.log(\"click\")\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", API_URL+'/users/new', true);\r\n\r\n    //Send the proper header information along with the request\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n    xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n            console.log(this)\r\n            let response = JSON.parse(xhr.response)\r\n            this.setState({\r\n                loggedIn: true,\r\n                username: response.username,\r\n                user_id: response.id\r\n            })\r\n        }\r\n    }\r\n    var data = {\r\n        \"username\" : document.querySelector('#username').value,\r\n        \"password\" : document.querySelector('#password').value,\r\n        \"confirm\" : document.querySelector('#confirm').value,\r\n        \"email\" : document.querySelector('#email').value\r\n    }\r\n    xhr.send(JSON.stringify(data));\r\n  }\r\n  handleLogin(){ \r\n    console.log(\"click\")\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", API_URL+ '/login', true);\r\n\r\n    //Send the proper header information along with the request\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n    xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n          let response = JSON.parse(xhr.response)\r\n            if(xhr.status === 200){\r\n              console.log(this)\r\n              this.setState({\r\n                  loggedIn: true,\r\n                  username: response.username,\r\n                  user_id: response.id\r\n              })\r\n            }\r\n            else{\r\n              console.log(response)\r\n              alert(\"Unrecognized User. Please try again. If problem persists email jase@perfectmypodcast.com\")\r\n            }\r\n        }\r\n    }\r\n    var data = {\r\n        \"username\" : document.querySelector('#username').value,\r\n        \"password\" : document.querySelector('#password').value\r\n    }\r\n    xhr.send(JSON.stringify(data));\r\n  }\r\n\r\n  handleInitializeGame(){ \r\n    var xhr = new XMLHttpRequest();\r\n    var url = API_URL+\"/games/start\"\r\n    \r\n    xhr.open(\"POST\", url, true);\r\n    xhr.onreadystatechange = () => {\r\n      if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){\r\n        //Go to Staging Area\r\n        var response = JSON.parse(xhr.response)\r\n        console.log(\"Game Started: \", response)\r\n        this.setState({\r\n          gameStatus: \"active\",\r\n          gameData: response,\r\n          currentTurn: { //default everytime component rerenders\r\n            canPlay: false,\r\n            reserveCard: false,\r\n            openReserve: false,\r\n            player: response.players[response.turn % response.players.length],\r\n            choice: null, // null, tokens, card\r\n            tokensSelected : [], //Array of 3 token Ids\r\n            cardSelected : {\r\n              id: null,\r\n              tokenName: null\r\n            },\r\n          }\r\n        })\r\n      }\r\n    }\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    var data = {\r\n      \"game_id\" : this.state.gameData.id\r\n    }\r\n    xhr.send(JSON.stringify(data))\r\n  }\r\n  handleStartGame(e){\r\n    var xhr = new XMLHttpRequest();\r\n    var url = API_URL+\"/games/new?user_id=\"+this.state.user_id\r\n    var char_id = document.getElementById(\"character_id\").value\r\n    var joinOrStart = document.getElementById(\"join_start\").value\r\n\r\n    if(joinOrStart === \"new_game\"){\r\n      url += \"&character_id=\"+char_id\r\n      xhr.open(\"GET\", url , true);\r\n  \r\n      //Send the proper header information along with the request\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n  \r\n      xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n          if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n              console.log(JSON.parse(xhr.response))\r\n              let response = JSON.parse(xhr.response)\r\n              this.setState({\r\n                gameStatus: \"waiting\",\r\n                gameData: response\r\n              })\r\n              \r\n          }\r\n      }\r\n  \r\n      xhr.send();\r\n    }\r\n    else{ \r\n      var url = API_URL+\"/games/join\"\r\n      var game_id = document.getElementById(\"game_id\").value\r\n\r\n      xhr.open(\"POST\", url, true);\r\n      xhr.onreadystatechange = () => {\r\n        if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){\r\n          //Go to Staging Area\r\n          var response = JSON.parse(xhr.response)\r\n          console.log(\"Game Joined: \", response)\r\n          this.setState({\r\n            gameStatus: \"waiting\",\r\n            gameData: response\r\n          })\r\n        }\r\n      }\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      var data ={\r\n        \"user_id\" : this.state.user_id,\r\n        \"character_id\" : parseInt(char_id),\r\n        \"game_id\" : parseInt(game_id)\r\n      }\r\n      xhr.send(JSON.stringify(data))\r\n    }\r\n    \r\n\r\n  }\r\n  checkNobles(response, extraCard = \"\"){\r\n    console.log(\"EXTRA CARD IS: \", extraCard)\r\n    var currentPlayer = response.players.filter(player => player.user.id === this.state.user_id)\r\n    console.log(\"CURRENT PLAYER: \", currentPlayer)\r\n    var nobles = response.nobles\r\n    var tokenList = [\"diamond\", \"ruby\", \"sapphire\", \"onyx\", \"emerald\"]\r\n    var hand = {\r\n      \"diamond\" : 0,\r\n      \"ruby\" : 0, \r\n      \"sapphire\" : 0, \r\n      \"onyx\" : 0, \r\n      \"emerald\" : 0\r\n    }\r\n    if(extraCard != \"\"){\r\n      if(this.state.currentTurn.cardSelected.id && this.state.currentTurn.tokensSelected.length >0){//Checks to see if the extra card is a reserved card or not.\r\n        // continue\r\n      }\r\n      else{\r\n        hand[extraCard] += 1\r\n      }\r\n    }\r\n    for(var i = 0; i < currentPlayer[0].cards.length; i++){ //sets hand\r\n      if(currentPlayer[0].ownedCards[i] === \"1\"){ //Checks for Reserved Cards\r\n        hand[currentPlayer[0].cards[i].tokenName] += 1\r\n      }\r\n    }\r\n    var availableNobles = []\r\n    for(var i = 0; i < nobles.length; i++){\r\n      var is_available = true\r\n      for(var j = 0; j < tokenList.length; j++){\r\n        console.log(\"Hand: \", hand)\r\n        console.log(\"tokenCost: \", nobles[i].tokenCost)\r\n        if(nobles[i].tokenCost[tokenList[j]] > hand[tokenList[j]]){\r\n          is_available = false\r\n        }\r\n      }\r\n      console.log(is_available)\r\n      if(is_available){\r\n        availableNobles.push(nobles[i])\r\n        }\r\n      }\r\n      return availableNobles\r\n    }\r\n  getGameUpdate(){ \r\n    var xhr = new XMLHttpRequest();\r\n    var url = API_URL+\"/games/\"+ this.state.gameData.id\r\n    \r\n    xhr.open(\"POST\", url, true);\r\n    xhr.onreadystatechange = () => {\r\n      if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200){\r\n        //Go to Staging Area\r\n        var response = JSON.parse(xhr.response)\r\n        console.log(\"Game Update: \", response)\r\n        if(response.decks.length > 0){\r\n          \r\n          var updated = this.state.currentTurn\r\n          updated.player = (response.players[response.turn % response.players.length])\r\n\r\n          this.setState({\r\n            gameStatus: \"active\",\r\n            gameData: response,\r\n            currentTurn: updated,\r\n          })\r\n        }\r\n        else{\r\n          this.setState({\r\n            gameData: response\r\n          })\r\n        }\r\n      }\r\n    }\r\n    var data ={\r\n      \"game_id\" : this.state.gameData.id\r\n    }\r\n    xhr.send(JSON.stringify(data))\r\n  }\r\n  handlePlayClick(e){ //Currently doesn't work properly. \r\n    //Checks to see if the play would warrant getting a noble \r\n    var availableNobles = this.checkNobles(this.state.gameData, this.state.currentTurn.cardSelected.tokenName )\r\n\r\n    if(this.state.currentTurn.tokensSelected[0] === 6 && this.state.currentTurn.reserveCard === false){\r\n      console.log(\"CONSOLING LOG RESERVING CARD\")\r\n      this.reserveCard()\r\n    }\r\n    else if(availableNobles.length > 0){ // if noble is available, re-renderes the screen with available nobles\r\n      this.setNobleState(availableNobles)\r\n    }\r\n    else{\r\n      this.playTurn()\r\n    }\r\n    //Noble would submit the play information\r\n  }\r\n  //Sends the Noble Div with the information from the play.\r\n  setNobleState(availableNobles){\r\n    var copyCurrentTurn = this.state.currentTurn\r\n    copyCurrentTurn.canPlay = false\r\n\r\n    this.setState({\r\n      availableNobles: availableNobles,\r\n      currentTurn: copyCurrentTurn\r\n    })\r\n  }\r\n  cancelPlay(){\r\n    var updated = this.state.currentTurn\r\n    \r\n    updated.canPlay = false\r\n      this.setState({\r\n        currentTurn: updated\r\n      })\r\n  }\r\n  getGoldCoin(){\r\n    var xhr = new XMLHttpRequest();\r\n    var url = '/games/'+this.state.gameData.id+\"/taketokens/\"+this.state.currentTurn.player.id\r\n    xhr.open(\"POST\", API_URL+ url, true);\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n          let response = JSON.parse(xhr.response)\r\n          console.log(\"GOT GOLD COIN\")\r\n            if(xhr.status === 200){\r\n              this.setState({\r\n                currentTurn: { //default everytime component rerenders\r\n                  canPlay: false,\r\n                  reserveCard: false,\r\n                  openReserve: false,\r\n                  player: response.players[response.turn % response.players.length],\r\n                  choice: null, // null, tokens, card\r\n                  tokensSelected : [], //Array of 3 token Ids\r\n                  cardSelected : {\r\n                    id: null, \r\n                    tokenName: null,\r\n                  } \r\n              },\r\n              availableNobles : []\r\n              })\r\n              this.getGameUpdate()\r\n            }\r\n            else{\r\n              console.log(response)\r\n              alert(\"Problem with Play! \")\r\n            }\r\n        }\r\n    }\r\n    var data = {\r\n        \"tokens\" : this.state.currentTurn.tokensSelected\r\n    }\r\n    xhr.send(JSON.stringify(data));\r\n  }\r\n  playTurn(){\r\n    if(this.state.currentTurn.tokensSelected[0] === 6 && this.state.currentTurn.reserveCard){\r\n      this.getReserveCard()\r\n      //this.getGoldCoin()\r\n      return\r\n    }\r\n    \r\n    if(this.state.currentTurn.tokensSelected.length > 0){\r\n      var xhr = new XMLHttpRequest();\r\n      var url = '/games/'+this.state.gameData.id+\"/taketokens/\"+this.state.currentTurn.player.id\r\n      xhr.open(\"POST\", API_URL+ url, true);\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n            let response = JSON.parse(xhr.response)\r\n              if(xhr.status === 200){\r\n                this.setState({\r\n                  currentTurn: { //default everytime component rerenders\r\n                    canPlay: false,\r\n                    reserveCard: false,\r\n                    openReserve: false,\r\n                    player: response.players[response.turn % response.players.length],\r\n                    choice: null, // null, tokens, card\r\n                    tokensSelected : [], //Array of 3 token Ids\r\n                    cardSelected : {\r\n                      id: null, \r\n                      tokenName: null,\r\n                    } \r\n                },\r\n                availableNobles : []\r\n                })\r\n                this.getGameUpdate()\r\n              }\r\n              else{\r\n                console.log(response)\r\n                alert(\"Problem with Play! \")\r\n              }\r\n          }\r\n      }\r\n      var data = {\r\n          \"tokens\" : this.state.currentTurn.tokensSelected\r\n      }\r\n      xhr.send(JSON.stringify(data));\r\n    }\r\n    else if(this.state.currentTurn.cardSelected.id){\r\n      console.log(\"Taking Card\")\r\n      var xhr = new XMLHttpRequest();\r\n      var url = '/games/'+this.state.gameData.id+\"/takecard/\"+this.state.currentTurn.player.id\r\n      xhr.open(\"POST\", API_URL+ url, true);\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n            let response = JSON.parse(xhr.response)\r\n              if(xhr.status === 200){\r\n                \r\n                this.setState({\r\n                  currentTurn: { //default everytime component rerenders\r\n                    canPlay: false,\r\n                    reserveCard: false,\r\n                    openReserve: false,\r\n                    player: response.players[response.turn % response.players.length],\r\n                    choice: null, // null, tokens, card\r\n                    tokensSelected : [], //Array of 3 token Ids\r\n                    cardSelected : {\r\n                      id: null, \r\n                      tokenName: null,\r\n                    } \r\n                  },\r\n                  availableNobles : []\r\n                })\r\n                this.getGameUpdate()\r\n              }\r\n              else{\r\n                console.log(response)\r\n                alert(\"Problem with Play! \")\r\n              }\r\n          }\r\n      }\r\n      var data = {\r\n          \"card_id\" : parseInt(this.state.currentTurn.cardSelected.id)\r\n      }\r\n      xhr.send(JSON.stringify(data));\r\n    }\r\n    \r\n  }\r\n  handleGetNoble(e){ \r\n    console.log(e.target.classList[1])\r\n    var xhr = new XMLHttpRequest();\r\n        var url = '/games/'+this.state.gameData.id+\"/takenoble/\"+this.state.currentTurn.player.id\r\n        xhr.open(\"POST\", API_URL+ url, true);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n          if (xhr.readyState === XMLHttpRequest.DONE) {\r\n              let response = JSON.parse(xhr.response)\r\n                if(xhr.status === 200){\r\n                  console.log(\"success\", response)\r\n                  this.setState({\r\n                    availableNobles : []\r\n                  })\r\n                  this.playTurn()\r\n                }\r\n                else{\r\n                  console.log(response)\r\n                  alert(\"Problem with Nobles! \")\r\n                }\r\n            }\r\n        }\r\n        var data = {\r\n            \"noble_id\" : parseInt(e.target.classList[1]),\r\n            \"tokenName\" : this.state.currentTurn.cardSelected.tokenName\r\n        }\r\n        xhr.send(JSON.stringify(data));\r\n  }\r\n  reserveCard(){\r\n    //pick a card\r\n    var copyCurrentTurn = this.state.currentTurn\r\n    copyCurrentTurn.reserveCard = true\r\n    copyCurrentTurn.canPlay = false\r\n    //render the game board again. Tokens unclickable and all Cards Selectable. \r\n    this.setState({\r\n      currentTurn: copyCurrentTurn\r\n    })\r\n    //when card is clicked pop-up with button 'reserve card' Go to handle play click. \r\n    //send API call to db and finish playing the turn with the token. \r\n  }\r\n  getReserveCard(){\r\n    var xhr = new XMLHttpRequest();\r\n      var url = '/games/'+this.state.gameData.id+\"/reservecard/\"+this.state.currentTurn.player.id\r\n      xhr.open(\"POST\", API_URL+ url, true);\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhr.onreadystatechange = () => { // Call a function when the state changes.\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n            let response = JSON.parse(xhr.response)\r\n              if(xhr.status === 200){\r\n                this.setState({\r\n                  currentTurn: { //default everytime component rerenders\r\n                    canPlay: false,\r\n                    reserveCard: false,\r\n                    openReserve: false,\r\n                    player: response.players[response.turn % response.players.length],\r\n                    choice: null, // null, tokens, card\r\n                    tokensSelected : [], //Array of 3 token Ids\r\n                    cardSelected : {\r\n                      id: null, \r\n                      tokenName: null,\r\n                    } \r\n                },\r\n                availableNobles : []\r\n                })\r\n                this.getGameUpdate()\r\n                console.log(\"RESPONSE AFTER RESERVE CARD\", response )\r\n                return\r\n              }\r\n              else{\r\n                console.log(response)\r\n                alert(\"Problem with Reserving Card!! \")\r\n              }\r\n          }\r\n      }\r\n      var data = {\r\n          \"card_id\" : parseInt(this.state.currentTurn.cardSelected.id)\r\n      }\r\n      xhr.send(JSON.stringify(data));\r\n  }\r\n  openReservedCardPanel(){\r\n    console.log(\"click\")\r\n    var updated = this.state.currentTurn\r\n    \r\n    updated.openReserve = true\r\n      this.setState({\r\n        currentTurn: updated\r\n      })\r\n  }\r\n  closeReservedCardPanel(){\r\n    console.log(\"click\")\r\n    var updated = this.state.currentTurn\r\n    \r\n    updated.openReserve = false\r\n      this.setState({\r\n        currentTurn: updated\r\n      })\r\n  }\r\n  renderApp(){\r\n    if(this.state.gameStatus === \"active\"){\r\n        return(<Game \r\n          game={this.state.gameData} \r\n          currentTurn = {this.state.currentTurn}\r\n          availableNobles = {this.state.availableNobles}\r\n          selectToken = {this.handleGetToken}\r\n          selectCard = {this.handleSelectCard}\r\n          playTurn = {this.handlePlayClick}\r\n          cancelPlay = {this.cancelPlay}\r\n          loggedInPlayer = {this.state.gameData.players.filter(player => player.user.id === this.state.user_id)[0]}\r\n          getNoble = {this.handleGetNoble}\r\n          openReservedCardPanel = {this.openReservedCardPanel}\r\n          closeReservedCardPanel = {this.closeReservedCardPanel}\r\n          />)\r\n      }\r\n    else{\r\n      return(< WaitingArea \r\n        register={this.handleRegister}\r\n        loggedIn={this.state.loggedIn}\r\n        startgame ={this.handleStartGame}\r\n        gameStatus ={this.state.gameStatus}\r\n        gameData = {this.state.gameData} \r\n        login = {this.handleLogin}\r\n        initGame = {this.handleInitializeGame}\r\n        getUpdate = {this.getGameUpdate}\r\n        />)\r\n    }\r\n  }\r\n  render(){\r\n    \r\n    console.log(\"Current Turn STATE: \", this.state)\r\n    return (\r\n      <div className=\"App\">\r\n          {this.renderApp()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}